// User database management
import bcrypt from 'bcryptjs';
import { PrismaClient } from '@prisma/client';
// The User type is automatically generated by Prisma and available globally


const prisma = new PrismaClient();
// Create a new user in the database
export async function createUser(user: any): Promise<any> {
  const { username, password, email, firstName, lastName, branch, position, permissions } = user;
  try {
    console.log('createUser called with:', user);
  const existing = await prisma.user.findUnique({ where: { username } });
    console.log('existing user:', existing);
    if (existing) {
      return { success: false, message: 'Username already exists' };
    }
    const hashedPassword = await bcrypt.hash(password, 10);
    const created = await prisma.user.create({
      data: {
        username,
        password: hashedPassword,
        email,
        firstName,
        lastName,
        branch,
        position,
        permissions: Array.isArray(permissions) ? permissions.join(',') : permissions,
      },
    });
    console.log('created user:', created);
    return { success: true, message: 'User created successfully' };
  } catch (error: any) {
    console.error('createUser error:', error?.message || error);
    return { success: false, message: error?.message ? `Database error: ${error.message}` : 'Database error' };
  }
}

// Authenticate user
export async function authenticateUser(username: string, password: string): Promise<{ success: boolean; user?: any }> {
  try {
    console.log('authenticateUser called with:', username);
  const user = await prisma.user.findUnique({ where: { username } });
    console.log('user found:', user);
    if (!user) {
      return { success: false };
    }
    const isPasswordValid = await bcrypt.compare(password, user.password);
    console.log('isPasswordValid:', isPasswordValid);
    if (!isPasswordValid) {
      return { success: false };
    }
    const { password: _, ...userWithoutPassword } = user;
    return { success: true, user: userWithoutPassword };
  } catch (error) {
    console.error('Error authenticating user:', error);
    return { success: false };
  }
}

// Get all users (without passwords)
export async function getAllUsers(): Promise<any[]> {
  try {
  const users = await prisma.user.findMany();
    return users.map((user: any) => {
      const { password, ...rest } = user;
      return rest;
    });
  } catch (error) {
    console.error('Error getting users:', error);
    return [];
  }
}

export async function deleteUser(userId: number): Promise<{ success: boolean; message: string }> {
  try {
  await prisma.user.delete({ where: { id: userId } });
    return { success: true, message: 'User deleted successfully' };
  } catch (error) {
    console.error('Error deleting user:', error);
    return { success: false, message: 'Failed to delete user' };
  }
}

// Get all users (without passwords)
